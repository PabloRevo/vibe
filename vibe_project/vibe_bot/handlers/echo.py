"""
–§–∞–π–ª - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
"""
from datetime import date, datetime
from typing import Union
from aiogram import Dispatcher, types
from loader import logger, bot
from database.models import *


async def echo_handler(message: types.Message) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä - –æ–ø–æ–≤–µ—â–∞–µ—Ç –±–æ—Ç–∞ –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ (–≠—Ö–æ)
    :param message: Message
    :return: None
    """
    try:
        await message.delete()
    except Exception as error:
        logger.error('–í —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', exc_info=error)


async def delete_message(user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    :param user_id: int
    :return: None
    """
    try:
        mess = DeleteMessage.get_or_none(DeleteMessage.chat_id == user_id)
        if mess:
            if '&' in mess.message_id:
                mes_ids = mess.message_id.split('&')
                for elem in mes_ids:
                    try:
                        await bot.delete_message(chat_id=mess.chat_id, message_id=int(elem))
                    except Exception as ex:
                        print(ex)
            else:
                try:
                    await bot.delete_message(chat_id=mess.chat_id, message_id=int(mess.message_id))
                except Exception as ex:
                    print(ex)
            try:
                mess.delete_instance()
            except Exception as ex:
                print(ex)
    except Exception as error:
        logger.error('–í —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', exc_info=error)


async def active_user(user, username: Union[str, None]) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ.
    :param username: str
    :param user: ModelSelect
    :return: None
    """
    try:
        if user.username is None:
            user.username = username
        user.active_at = datetime.today()
        user.save()
    except Exception as error:
        logger.error('–í —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', exc_info=error)


async def total_answers() -> None:
    """
    –§—É–Ω–∫—Ü–∏—è - –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤ –∫–≤–∏–∑–∞—Ö –∑–∞ –¥–µ–Ω—å
    :return: None
    """
    try:
        statistics = Statistics.get_or_none(Statistics.created_at == date.today())
        if statistics:
            statistics.answers += 1
            statistics.save()
        else:
            Statistics(created_at=date.today(), answers=1).save()
    except Exception as error:
        logger.error('–í —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', exc_info=error)


async def total_timeouts() -> None:
    """
    –§—É–Ω–∫—Ü–∏—è - –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ 12 –≤–æ–ø—Ä–æ—Å–æ–≤
    :return: None
    """
    try:
        statistics = Statistics.get_or_none(Statistics.created_at == date.today())
        if statistics:
            statistics.timeouts += 1
            statistics.save()
        else:
            Statistics(created_at=date.today(), timeouts=1).save()
    except Exception as error:
        logger.error('–í —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', exc_info=error)


async def total_send_requests() -> None:
    """
    –§—É–Ω–∫—Ü–∏—è - —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ
    :return: None
    """
    try:
        statistics = Statistics.get_or_none(Statistics.created_at == date.today())
        if statistics:
            statistics.send_requests += 1
            statistics.save()
        else:
            Statistics(created_at=date.today(), send_requests=1).save()
    except Exception as error:
        logger.error('–í —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', exc_info=error)


async def total_confirm_requests() -> None:
    """
    –§—É–Ω–∫—Ü–∏—è - —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ
    :return: None
    """
    try:
        statistics = Statistics.get_or_none(Statistics.created_at == date.today())
        if statistics:
            statistics.confirm_requests += 1
            statistics.save()
        else:
            Statistics(created_at=date.today(), confirm_requests=1).save()
    except Exception as error:
        logger.error('–í —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', exc_info=error)


async def total_signup_invite() -> None:
    """
    –§—É–Ω–∫—Ü–∏—è - —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞–º
    :return: None
    """
    try:
        statistics = Statistics.get_or_none(Statistics.created_at == date.today())
        if statistics:
            statistics.signup_invite += 1
            statistics.save()
        else:
            Statistics(created_at=date.today(), signup_invite=1).save()
    except Exception as error:
        logger.error('–í —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', exc_info=error)


async def total_buy() -> None:
    """
    –§—É–Ω–∫—Ü–∏—è - —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
    :return: None
    """
    try:
        statistics = Statistics.get_or_none(Statistics.created_at == date.today())
        if statistics:
            statistics.buy += 1
            statistics.save()
        else:
            Statistics(created_at=date.today(), buy=1).save()
    except Exception as error:
        logger.error('–í —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', exc_info=error)


async def set_user_commands(user_id):
    await bot.set_my_commands(
        [
            types.BotCommand("start", "–°—Ç–∞—Ä—Ç"),
            types.BotCommand("ratefriends", "üé≤ –û—Ü–µ–Ω–∏–≤–∞—Ç—å –¥—Ä—É–∑–µ–π"),
            types.BotCommand('myrate', 'üì´ –ú–µ–Ω—è –æ—Ü–µ–Ω–∏–ª–∏'),
            types.BotCommand("requests", "ü•∑ –ó–∞–ø—Ä–æ—Å—ã"),
            types.BotCommand("change_name", "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"),
            types.BotCommand("write_support", "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂—É"),
        ],
        scope=types.BotCommandScopeChat(chat_id=user_id)
    )


def register_echo_handlers(dp: Dispatcher) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã —Ñ–∞–π–ª–∞ echo.py
    :param dp: Dispatcher
    :return: None
    """
    dp.register_message_handler(echo_handler, state='*')
